import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample historical performance data
# Each entry is a tuple: (number of wins, number of losses, performance score)
data = [
    (5, 2, 85),
    (3, 4, 60),
    (8, 1, 95),
    (4, 3, 70),
    (7, 2, 90),
    (6, 3, 80),
]

# Splitting data into features (X) and target (y)
X = np.array([(wins, losses) for wins, losses, _ in data])
y = np.array([score for _, _, score in data])

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating a Linear Regression model
model = LinearRegression()

# Training the model
model.fit(X_train, y_train)

# Making predictions
y_pred = model.predict(X_test)

# Calculating Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Example prediction
new_student_performance = model.predict(np.array([[6, 2]]))
print("Predicted performance for a student with 6 wins and 2 losses:", new_student_performance)
